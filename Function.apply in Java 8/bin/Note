java.util.function.Function is an interface and has been introduced in java 8. Function is a functional interface. So it can be used to accept lambda expression. Function accepts one argument and returns the result. Function interface contains one method that is apply(). This is the functional interface method. Find the declaration of apply() method.
R apply(T t)
Where T is the function argument and R is the result. 
To use it we need to define Function. Suppose we have a method customShow () inside student class which will accept Function instance. Find the student class. 
Student.java
package com.concretepage.lambda;
import java.util.function.Function;
public class Student {
    public String name;
    public int age;
    public Student(String name,int age){
        this.name = name;
        this.age = age;
    }
    public  String customShow(Function<Student,String> fun){
        return fun.apply(this);
    }
}
There is a customShow() method which is accepting Function interface. Now we can create function instance in three ways.
for(Student st: list){
    System.out.println(st.customShow(s->s.name+": "+s.name));
}
This is first way. Just pass the s->s.name+": "+s.name as Function instance to customShow method.
Function<Student,String> styleOne = s->{
     String result =  "Name:"+s.name +" and Age:"+s.age;
     return result;
};
In second way, we declare Function in separate place and manipulate the result and finally return.
Function<Student,String> styleTwo = s->        
            "Name:"+s.name +" and Age:"+s.age;
In third way, define function in a single line.
