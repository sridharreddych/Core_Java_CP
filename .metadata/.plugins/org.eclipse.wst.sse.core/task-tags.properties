#
#Wed Jul 25 11:27:32 IST 2018
task-tag-projects-already-scanned=Stream.reduce() with Identity and Accumulator,Stream.collect() with Collectors.counting(),Stream.limit,Collectors.counting,Stream.findAny,Servers,Summary Statistics Example with Primitive Data Type,Java 8 Runnable Lambda Example with Argument,LongFunction'R',Stream.of(),java.security.SecureRandom,Stream.reduce() with Identity&comma; Accumulator and Combiner,Stream.concat,Java 8 CompletableFuture Example,LongToIntFunction,Arrays.parallelSort() with Primitive Data Type,Comparator.naturalOrder and Comparator.reverseOrder,FlatMapToDouble,ConcatSets,Streamdistinct()withListofObjects,BinaryOperator,Stream.collect() using Supplier&comma; Accumulator and Combiner,Java 8 Callable Lambda Example with Argument,Collectors.mapping,ConcatStreams,Stream.count(),Stream.flatMap()1,Stream.concat(),LongStream,Stream.count,Sum of Map Example,Collectors.averagingInt,core-java,Stream mapToInt() Example,Java 8 Collectors -reducing Example,Stream sorted() with List,IntFunction'R',Stream flatMap with List,LongSupplier,Stream.allMatch()&comma; Stream.anyMatch() and Stream.noneMatch(),Stream.collect() with Collectors.toMap(),Stream.iterate(),BiPredicate,Collectors.averagingLong,Stream.allMatch,Stream.filter(),Sum of List of Array Example,Arrays.parallelSort() with Comparator,Stream.sorted,Stream.generate() and Stream.limit(),Comparator.comparing and Comparator.reversed,Arrays.parallelSort() with Comparable,Arrays.parallelPrefix() with Array of Primitive Data Types,Stream flatMap with Array,BigDecimal Sum Using List,Streamdistinct,Collectors.joining,List to Map with Key Mapper and Value Mapper,forEach(),Comparator.thenComparing,Collectors.maxBy and Collectors.minBy,UnaryOperator,Stream.collect() with Collectors.toList(),BooleanSupplier,Stream.peek,Reduce List and Array into Sum,Java 8 Collectors- partitioningBy Example,Supplier to Fetch Method of an Object,Stream flatMap with Array of Objects,Stream.distinct(),Stream.sorted(),LongToDoubleFunction,1. Stream filter() with findFirst()&comma; orElse() and forEach(),Stream sorted() with Map,Stream.toArray(),BiFunction,Collectors.joining() with List of Objects,IntToLongFunction,Stream sorted() with Set,Stream.map(),DistinctbyProperty,Stream.flatMap(),BiConsumer,Stream.peek(),ToIntFunction'T',ToDoubleFunction'T',Collectors.joining() with List of String,Convert Map to List of User Object Example2,Simple Map to List Example,List to Map with Key Mapper&comma; Value Mapper and Merge Function,Stream.skip(),Stream.filter,Stream.map,DoubleToLongFunction,ToIntBiFunction'T&comma;U',java.util.Random,Stream.forEach and Stream.forEachOrdered,Collectors.summingInt,Stream.collect(),sort(),StringJoiner Example1,FlatMapToLong,ToLongBiFunction'T&comma;U',Convert Map to List using Stream map(),BinaryOperator.maxBy and BinaryOperator.minBy,Supplier as an Argument with Stream API,BigDecimal Sum Using Map,Summary Statistics Example with Objects,DoubleFunction 'R',4. Stream filter() with reduce(),StringJoiner Example2,Reduce List and Array into a String,Stream.skip,Collectors.summingLong,Arrays.parallelPrefix() with Array of Objects,Stream.generate(),Convert Map to List of User Object Example,Access Constructor Parameters using Java 8 Reflection,Stream flatMap with List of Lists,5. Stream filter() with List,Stream.toArray,Concat Lists,IntSupplier,CompletableFuture.thenAccept,Java 8 Collectors- groupingBy Example,SortingMapWhoseValues AreCustomObjects,Stream flatMap with Files.lines(),Collectors.collectingAndThen,IntToDoubleFunction,Stream.collect() using Collector,RemoteSystemsTempFiles,Convert List to another List using Stream map(),ToDoubleBiFunction'T&comma;U',Stream.max() and Stream.min(),Stream.reduce() with Accumulator,BigDecimal Sum Using Array,Stream.collect() with Collectors.joining(),Stream.forEach() and Stream.forEachOrdered(),Sum of Array Example,Stream.max() and Stream.min()1,CompletableFuture.whenComplete,Stream.reduce(),replaceAll(),ToLongFunction'T',java.time.Period,Collectors.toList,Stream.findFirst,2. Stream filter() with mapToInt() and sum(),Concat Arrays,Stream.collect() with Collectors.averagingInt(),List to Map with Key Mapper&comma; Value Mapper&comma; Merge Function and Map Supplier,Stream.findAny() and Stream.findFirst(),Supplier to return Object of a Class,Collectors.averagingDouble,Function 'T&comma;R',Collectors.toMap,Collectors.summingDouble,CompletableFuture.getNow,Sum of List Example,Collectors.toSet,DoubleSupplier,Stream.distinct,Access Method Parameters using Java 8 Reflection,removeIf(),3. Stream filter() with collect(),DoubleStream,FlatMapToInt,IntStream,DoubleToIntFunction
